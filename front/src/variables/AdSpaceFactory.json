{
  "address": "0x7109696709d8996E580D8c1C69e95fB32E905197",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tablelandAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        }
      ],
      "name": "AdSpaceCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "AdSpaceId",
          "type": "uint256"
        }
      ],
      "name": "AdSpaceUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "CampaignId",
          "type": "uint256"
        }
      ],
      "name": "CampaignCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "DealId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "CampaignId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "AdSpaceId",
          "type": "uint256"
        }
      ],
      "name": "DealCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_website",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_asking_price",
          "type": "string"
        },
        {
          "internalType": "uint8",
          "name": "_numNFTs",
          "type": "uint8"
        },
        {
          "internalType": "string",
          "name": "_size",
          "type": "string"
        }
      ],
      "name": "createAdSpace",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "cid",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "size",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "link",
          "type": "string"
        }
      ],
      "name": "createCampaign",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_adspaceId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        },
        {
          "internalType": "uint40",
          "name": "_end_at",
          "type": "uint40"
        },
        {
          "internalType": "uint256",
          "name": "_campaignId",
          "type": "uint256"
        }
      ],
      "name": "createDeal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "i",
          "type": "uint256"
        }
      ],
      "name": "getAdSpaceAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAdSpaceTable",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAdSpaceTableId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCampaignTable",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCampaignTableId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCounterAdSpaces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDealTable",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDealTableId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_adspaceId",
          "type": "uint256"
        }
      ],
      "name": "verifyAdSpace",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc87164611435eb6d602f7370de41d7813372029135d4ae01ef27cd3174e7d5c6",
  "receipt": {
    "to": null,
    "from": "0x075722506D57BE6106Be2deFB5e5C947dBBfd2f3",
    "contractAddress": "0x7109696709d8996E580D8c1C69e95fB32E905197",
    "transactionIndex": 0,
    "gasUsed": "4190507",
    "logsBloom": "0x
    "blockHash": "0x93c640f3a8ff9e494d4d311a8988e386411c1c6ca6d1e061e95577fe3647da05",
    "transactionHash": "0xc87164611435eb6d602f7370de41d7813372029135d4ae01ef27cd3174e7d5c6",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 1409758,
        "transactionHash": "0xc87164611435eb6d602f7370de41d7813372029135d4ae01ef27cd3174e7d5c6",
        "address": "0x7109696709d8996E580D8c1C69e95fB32E905197",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000075722506d57be6106be2defb5e5c947dbbfd2f3"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x93c640f3a8ff9e494d4d311a8988e386411c1c6ca6d1e061e95577fe3647da05"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 1409758,
        "transactionHash": "0xc87164611435eb6d602f7370de41d7813372029135d4ae01ef27cd3174e7d5c6",
        "address": "0xC72E8a7Be04f2469f8C2dB3F1BdF69A7D516aBbA",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000007109696709d8996e580d8c1c69e95fb32e905197",
          "0x000000000000000000000000000000000000000000000000000000000000006f"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x93c640f3a8ff9e494d4d311a8988e386411c1c6ca6d1e061e95577fe3647da05"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 1409758,
        "transactionHash": "0xc87164611435eb6d602f7370de41d7813372029135d4ae01ef27cd3174e7d5c6",
        "address": "0xC72E8a7Be04f2469f8C2dB3F1BdF69A7D516aBbA",
        "topics": [
          "0xfe0c067afc4fe17adcf4cfa139aabad6dc30dd86dfe39fb2b858961637156cdd"
        ],
        "data": "0x0000000000000000000000007109696709d8996e580d8c1c69e95fb32e905197000000000000000000000000000000000000000000000000000000000000006f000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000ae435245415445205441424c452041645370616365735f3432302028616473706163655f696420494e5445474552205052494d415259204b45592c6e616d6520544558542c207765627369746520544558542c20766572696669656420494e54454745522c2073746174757320544558542c206f776e657220544558542c20636f6e747261637420544558542c2061736b696e675f707269636520494e54454745522c2073697a652054455854293b000000000000000000000000000000000000",
        "logIndex": 2,
        "blockHash": "0x93c640f3a8ff9e494d4d311a8988e386411c1c6ca6d1e061e95577fe3647da05"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 1409758,
        "transactionHash": "0xc87164611435eb6d602f7370de41d7813372029135d4ae01ef27cd3174e7d5c6",
        "address": "0xC72E8a7Be04f2469f8C2dB3F1BdF69A7D516aBbA",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000007109696709d8996e580d8c1c69e95fb32e905197",
          "0x0000000000000000000000000000000000000000000000000000000000000070"
        ],
        "data": "0x",
        "logIndex": 3,
        "blockHash": "0x93c640f3a8ff9e494d4d311a8988e386411c1c6ca6d1e061e95577fe3647da05"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 1409758,
        "transactionHash": "0xc87164611435eb6d602f7370de41d7813372029135d4ae01ef27cd3174e7d5c6",
        "address": "0xC72E8a7Be04f2469f8C2dB3F1BdF69A7D516aBbA",
        "topics": [
          "0xfe0c067afc4fe17adcf4cfa139aabad6dc30dd86dfe39fb2b858961637156cdd"
        ],
        "data": "0x0000000000000000000000007109696709d8996e580d8c1c69e95fb32e905197000000000000000000000000000000000000000000000000000000000000007000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000073435245415445205441424c452043616d706169676e735f343230202863616d706169676e5f696420494e5445474552205052494d415259204b45592c6e616d6520544558542c2063696420544558542c2073697a6520544558542c206c696e6b20544558542c206f776e65722054455854293b00000000000000000000000000",
        "logIndex": 4,
        "blockHash": "0x93c640f3a8ff9e494d4d311a8988e386411c1c6ca6d1e061e95577fe3647da05"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 1409758,
        "transactionHash": "0xc87164611435eb6d602f7370de41d7813372029135d4ae01ef27cd3174e7d5c6",
        "address": "0xC72E8a7Be04f2469f8C2dB3F1BdF69A7D516aBbA",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000007109696709d8996e580d8c1c69e95fb32e905197",
          "0x0000000000000000000000000000000000000000000000000000000000000071"
        ],
        "data": "0x",
        "logIndex": 5,
        "blockHash": "0x93c640f3a8ff9e494d4d311a8988e386411c1c6ca6d1e061e95577fe3647da05"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 1409758,
        "transactionHash": "0xc87164611435eb6d602f7370de41d7813372029135d4ae01ef27cd3174e7d5c6",
        "address": "0xC72E8a7Be04f2469f8C2dB3F1BdF69A7D516aBbA",
        "topics": [
          "0xfe0c067afc4fe17adcf4cfa139aabad6dc30dd86dfe39fb2b858961637156cdd"
        ],
        "data": "0x0000000000000000000000007109696709d8996e580d8c1c69e95fb32e905197000000000000000000000000000000000000000000000000000000000000007100000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000097435245415445205441424c45204465616c735f34323020286465616c5f696420494e5445474552205052494d415259204b45592c2063616d706169676e5f69645f666b20494e54454745522c20616473706163655f69645f666b20494e54454745522c20656e645f617420494e54454745522c20707269636520494e54454745522c20737461727465645f617420494e5445474552293b000000000000000000",
        "logIndex": 6,
        "blockHash": "0x93c640f3a8ff9e494d4d311a8988e386411c1c6ca6d1e061e95577fe3647da05"
      }
    ],
    "blockNumber": 1409758,
    "cumulativeGasUsed": "4190507",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xc72e8a7be04f2469f8c2db3f1bdf69a7d516abba"
  ],
  "solcInputHash": "fba9a22c97b21f91d3f87fd964bc52cc",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tablelandAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"AdSpaceCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"AdSpaceId\",\"type\":\"uint256\"}],\"name\":\"AdSpaceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"CampaignId\",\"type\":\"uint256\"}],\"name\":\"CampaignCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"DealId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"CampaignId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"AdSpaceId\",\"type\":\"uint256\"}],\"name\":\"DealCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_website\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_asking_price\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"_numNFTs\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"_size\",\"type\":\"string\"}],\"name\":\"createAdSpace\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"cid\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"size\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"link\",\"type\":\"string\"}],\"name\":\"createCampaign\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_adspaceId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint40\",\"name\":\"_end_at\",\"type\":\"uint40\"},{\"internalType\":\"uint256\",\"name\":\"_campaignId\",\"type\":\"uint256\"}],\"name\":\"createDeal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"getAdSpaceAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAdSpaceTable\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAdSpaceTableId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCampaignTable\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCampaignTableId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCounterAdSpaces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDealTable\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDealTableId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_adspaceId\",\"type\":\"uint256\"}],\"name\":\"verifyAdSpace\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"when deploying make sure to get the right Tableland contract for desired chainupon deployment this contract creates three Tableland Tables:AdSpaces_{chain}_{tableID}, Campaigns_{chain}_{tableID}, Deals_{chain}_{tableID}Custom errors need to be added...\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"tablelandAddress\":\"see docs.tableland.xyz for contracts on chains\"}},\"createAdSpace(string,string,string,uint8,string)\":{\"details\":\"id and owner will be set automatically\",\"params\":{\"_asking_price\":\"price of new creating Adspace\",\"_name\":\"name of new creating Adspace\",\"_numNFTs\":\"amount of NFTs to mint to msg.sender of creation\",\"_size\":\"size of the AdSpaces: wide | small | scyscraper\",\"_website\":\"website where the AdSpace will be located\"}},\"createCampaign(string,string,string,string)\":{\"details\":\"owner will be auto assigned to msg.sender\",\"params\":{\"cid\":\"id of the affected AdSpace\",\"link\":\"ending timestamp (UNIX)\",\"size\":\"negotiated price for the deal\"}},\"createDeal(uint256,uint256,uint40,uint256)\":{\"params\":{\"_adspaceId\":\"id of the affected AdSpace\",\"_campaignId\":\"id of the affected campaign\",\"_end_at\":\"ending timestamp (UNIX)\",\"_price\":\"negotiated price for the deal\"}},\"getAdSpaceAddress(uint256)\":{\"params\":{\"i\":\"the identifier (number) of the Adspace interested in\"},\"returns\":{\"_0\":\"address the addess of the AdSpace Contract with identifier i\"}},\"getAdSpaceTable()\":{\"returns\":{\"_0\":\"uint256 the full name of the current AdSpace Table of this AdSpaceFactory\"}},\"getAdSpaceTableId()\":{\"returns\":{\"_0\":\"uint256 the id of the current AdSpace Table of this AdSpaceFactory\"}},\"getCampaignTable()\":{\"returns\":{\"_0\":\"uint256 the full name of the current Campaign Table of this AdSpaceFactory\"}},\"getCampaignTableId()\":{\"returns\":{\"_0\":\"uint256 the id of the current Campaign Table of this AdSpaceFactory\"}},\"getCounterAdSpaces()\":{\"returns\":{\"_0\":\"uint256 the current amount of Adspaces created by this Factory\"}},\"getDealTable()\":{\"returns\":{\"_0\":\"uint256 he full name of the current Deal Table of this AdSpaceFactory\"}},\"getDealTableId()\":{\"returns\":{\"_0\":\"uint256 the id of the current Deal Table of this AdSpaceFactory\"}},\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"createAdSpace(string,string,string,uint8,string)\":{\"notice\":\"create new AdSpace contract\"},\"createCampaign(string,string,string,string)\":{\"notice\":\"Creating a Campaign and inserting row on Tableland\"},\"createDeal(uint256,uint256,uint40,uint256)\":{\"notice\":\"Creating Deal and inserting row on Tablelandafter creating the deal, the Adspace Table will update on the affected row\"}},\"notice\":\"This contract is the controller of all Tableland interactionsand deployer of all the AdSpace contracts\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/AdSpaceFactory.sol\":\"AdSpaceFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x0b606994df12f0ce35f6d2f6dcdde7e55e6899cdef7e00f180980caa81e3844e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0x0a79511df8151b10b0a0004d6a76ad956582d32824af4c0f4886bdbdfe5746e5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/utils/ERC721Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Receiver.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721Holder is IERC721Receiver {\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x0108bf6a6ebd5f96678bed33a35947537263f96766131ee91461fb6485805028\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/AdSpace.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.7 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\nimport \\\"./AdSpaceFactory.sol\\\";\\nimport \\\"./Interfaces/DaiToken.sol\\\";\\n\\ncontract AdSpace is ERC721Enumerable {\\n    using Strings for uint256;\\n\\n    // todo @acid: pinata pin\\n    string public baseURI = \\\"https://adspaces.xyz/adspace.json\\\";\\n    uint256 public maxSupply = 20;\\n    bool public paused = false;\\n    DaiToken public daiToken;\\n\\n    // owner on AdSpace open to discussion\\n    //address public adspaceOwner;\\n    uint public adspaceId;\\n    mapping(uint256 => uint40) public dealsToEndAt;\\n    mapping(uint256 => uint256) public dealsDaiValue;\\n\\n    address public revenueAddress = 0x49cB5Fa951AD2ABbC4d14239BfE215754c7Df030;\\n\\n    address public _factoryAddress;\\n    AdSpaceFactory public _factory;\\n\\n    event RevenueWithdraw(\\n        address indexed recipient,\\n        uint256 indexed _dealId,\\n        uint256 indexed adspace_id,\\n        uint256 amount\\n    );\\n    event PayAdSpace(\\n        address indexed payer,\\n        uint256 indexed _dealId,\\n        uint256 indexed adspace_id,\\n        uint256 amount\\n    );\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint256 _adspaceId,\\n        address _adspaceOwner,\\n        uint8 _numNFTs\\n    ) ERC721(_name, _symbol) {\\n        adspaceId = _adspaceId;\\n        //adspaceOwner = _adspaceOwner;\\n        daiToken = DaiToken(0xDA10009cBd5D07dd0CeCc66161FC93D7c9000da1);\\n        _factoryAddress = msg.sender;\\n        _factory = AdSpaceFactory(_factoryAddress);\\n\\n        // set royalties\\n        // _setRoyalties(msg.sender, 1000);\\n        require(_numNFTs > 0);\\n        maxSupply = maxSupply > _numNFTs ? _numNFTs : maxSupply;\\n        // mint NFTs\\n        for (uint256 m = 1; m <= maxSupply; m++) {\\n            _safeMint(_adspaceOwner, m);\\n        }\\n    }\\n\\n    // internal\\n    function _baseURI() internal view virtual override returns (string memory) {\\n        return baseURI;\\n    }\\n\\n    // this function is returning the token ids of the passed address\\n    // e.g. [5,7,8]\\n\\n    // @Riki check for array variations on sending tokens\\n    function walletOfOwner(address _owner)\\n        public\\n        view\\n        returns (uint256[] memory)\\n    {\\n        uint256 ownerTokenCount = balanceOf(_owner);\\n        uint256[] memory tokenIds = new uint256[](ownerTokenCount);\\n        for (uint256 i; i < ownerTokenCount; i++) {\\n            tokenIds[i] = tokenOfOwnerByIndex(_owner, i);\\n        }\\n        return tokenIds;\\n    }\\n\\n    function tokenURI(uint256 tokenId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (string memory)\\n    {\\n        require(\\n            _exists(tokenId),\\n            \\\"ERC721Metadata: URI query for nonexistent token\\\"\\n        );\\n\\n        return _baseURI();\\n    }\\n\\n    function createDeal(\\n        uint256 _amount,\\n        uint256 _duration_hrs,\\n        uint256 _campaignId\\n    ) public {\\n        daiToken.transferFrom(msg.sender, address(this), _amount);\\n        uint256 _dealId = _factory.createDeal(\\n            adspaceId,\\n            _amount,\\n            uint40(block.timestamp + (_duration_hrs * 3600)),\\n            _campaignId\\n        );\\n        dealsToEndAt[_dealId] = uint40(\\n            block.timestamp + (_duration_hrs * 3600)\\n        );\\n        dealsDaiValue[_dealId] = _amount;\\n        emit PayAdSpace(msg.sender, _dealId, adspaceId, _amount);\\n    }\\n\\n    /**\\n     * @notice require: we are checking if the end_at timestamp lies in the past,\\n     * so the user is qualified to withdraw from an expired deal onlydealsToEndAt\\n     */\\n    function withdraw(uint256 _dealId) public NFTHolder {\\n        require(dealsToEndAt[_dealId] <= block.timestamp);\\n        // At the end of the deal with TableLand, the money amount will come to the contract address?\\n        uint256 DAIAmount = dealsDaiValue[_dealId]; // its the value of the passed dealId in DAI\\n        uint256 revenueDAIAmount = DAIAmount / 100; // This is 1% of the actually held DAI to be sent for Revenue to the RevenueAddress\\n        uint256 newDaiAmount = DAIAmount - revenueDAIAmount; // This is the actual DAI amount we are going to distribute, excluding the 1% amount\\n        daiToken.transfer(revenueAddress, revenueDAIAmount); // Distribute the Revenue to the selected address\\n        uint256 DAIAmountPerNft = newDaiAmount / maxSupply; // DaiAmount / Token\\n        // loop through each token to correctly distribure money to each NFT owners\\n        for (uint i = 1; i <= maxSupply; i++) {\\n            // Looping from 1 as lowest tokenId number is 1\\n            address nftOwner = ownerOf(i); // This checks which tokenId belongs to which address\\n            daiToken.transfer(nftOwner, DAIAmountPerNft);\\n            // ...and send fraction of equity to its owner\\n            emit RevenueWithdraw(nftOwner, _dealId, adspaceId, DAIAmountPerNft);\\n        }\\n        delete dealsToEndAt[_dealId];\\n        delete dealsDaiValue[_dealId];\\n    }\\n\\n    function setBaseURI(string memory _newBaseURI) public onlyPlatform {\\n        baseURI = _newBaseURI;\\n    }\\n\\n    function setrevenueAddress(address _newrevenueAddress) public onlyPlatform {\\n        revenueAddress = _newrevenueAddress;\\n    }\\n\\n    function pause(bool _state) public onlyPlatform {\\n        paused = _state;\\n    }\\n\\n    // retreive eth accidentally sent to this contract\\n    function emergencyWithdraw() public payable onlyPlatform {\\n        (bool os, ) = payable(_factoryAddress).call{\\n            value: address(this).balance\\n        }(\\\"\\\"); // owner == factoryAddress\\n        require(os);\\n    }\\n\\n    // only the team can call this function\\n    modifier onlyPlatform() {\\n        require(msg.sender == revenueAddress);\\n        _;\\n    }\\n\\n    modifier NFTHolder() {\\n        // This checks when the caller wants to use the withdraw function that it is actually an NFT holder or not ( change this if you have simpler method, I have checked this it works )\\n        bool isHolder = false;\\n        for (uint i = 1; i <= maxSupply; i++) {\\n            address currentHolder = ownerOf(i);\\n            if (currentHolder == msg.sender) {\\n                isHolder = true;\\n            }\\n        }\\n        require(isHolder == true, \\\"You are not an NFT Holder!\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xa4a77cdea75e4920d503f4de050b8eab40f689da6a855b0ab7eb2736656e25c1\",\"license\":\"MIT\"},\"contracts/AdSpaceFactory.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\nimport \\\"./ITablelandTables.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"./AdSpace.sol\\\";\\n\\n/**\\n * @notice This contract is the controller of all Tableland interactions\\n * @notice and deployer of all the AdSpace contracts\\n * @dev when deploying make sure to get the right Tableland contract for desired chain\\n * @dev upon deployment this contract creates three Tableland Tables:\\n * @dev AdSpaces_{chain}_{tableID}, Campaigns_{chain}_{tableID}, Deals_{chain}_{tableID}\\n * @dev Custom errors need to be added...\\n */\\ncontract AdSpaceFactory is ERC721Holder, Ownable {\\n    /* Errors */\\n    /* tba */\\n\\n    /* Events */\\n    event AdSpaceCreated(address indexed contractAddress);\\n    event CampaignCreated(uint256 indexed CampaignId);\\n    event DealCreated(\\n        uint256 indexed DealId,\\n        uint256 indexed CampaignId,\\n        uint256 indexed AdSpaceId\\n    );\\n    event AdSpaceUpdated(uint256 indexed AdSpaceId);\\n\\n    /* Variables */\\n    ITablelandTables private _tableland;\\n\\n    uint256 private _adspacetableid;\\n    string private _adSpaceTable;\\n\\n    uint256 private _campaigntableid;\\n    string private _campaignTable;\\n\\n    uint256 private _dealtableid;\\n    string private _dealTable;\\n\\n    uint256 private _counter_adspaces = 0;\\n    uint256 private _counter_campaigns = 0;\\n    uint256 private _counter_deals = 0;\\n\\n    address[] private Adspaces;\\n\\n    /// @param tablelandAddress see docs.tableland.xyz for contracts on chains\\n    constructor(address tablelandAddress) {\\n        _tableland = ITablelandTables(tablelandAddress);\\n\\n        /// @notice creates AdSpace Table in Tableland\\n        string memory sqlAdSpace = string.concat(\\n            \\\"CREATE TABLE AdSpaces\\\",\\n            \\\"_\\\",\\n            Strings.toString(block.chainid),\\n            \\\" (adspace_id INTEGER PRIMARY KEY,name TEXT, website TEXT, verified INTEGER, status TEXT, owner TEXT, contract TEXT, asking_price INTEGER, size TEXT);\\\"\\n        );\\n        _adspacetableid = _createTable(sqlAdSpace);\\n        _adSpaceTable = string.concat(\\n            \\\"AdSpaces\\\",\\n            \\\"_\\\",\\n            Strings.toString(block.chainid),\\n            \\\"_\\\",\\n            Strings.toString(_adspacetableid)\\n        );\\n\\n        /// @notice creates Campaign Table in Tableland\\n        string memory sqlCampaign = string.concat(\\n            \\\"CREATE TABLE Campaigns\\\",\\n            \\\"_\\\",\\n            Strings.toString(block.chainid),\\n            \\\" (campaign_id INTEGER PRIMARY KEY,name TEXT, cid TEXT, size TEXT, link TEXT, owner TEXT);\\\"\\n        );\\n        _campaigntableid = _createTable(sqlCampaign);\\n        _campaignTable = string.concat(\\n            \\\"Campaigns\\\",\\n            \\\"_\\\",\\n            Strings.toString(block.chainid),\\n            \\\"_\\\",\\n            Strings.toString(_campaigntableid)\\n        );\\n\\n        /// @notice creates Deal Table in Tableland\\n        string memory sqlDeal = string.concat(\\n            \\\"CREATE TABLE Deals\\\",\\n            \\\"_\\\",\\n            Strings.toString(block.chainid),\\n            \\\" (deal_id INTEGER PRIMARY KEY, campaign_id_fk INTEGER, adspace_id_fk INTEGER, end_at INTEGER, price INTEGER, started_at INTEGER);\\\"\\n        );\\n        _dealtableid = _createTable(sqlDeal);\\n        _dealTable = string.concat(\\n            \\\"Deals\\\",\\n            \\\"_\\\",\\n            Strings.toString(block.chainid),\\n            \\\"_\\\",\\n            Strings.toString(_dealtableid)\\n        );\\n    }\\n\\n    /**\\n     * @notice create new AdSpace contract\\n     * @param _name name of new creating Adspace\\n     * @param _website website where the AdSpace will be located\\n     * @param _asking_price price of new creating Adspace\\n     * @param _numNFTs amount of NFTs to mint to msg.sender of creation\\n     * @param _size size of the AdSpaces: wide | small | scyscraper\\n     * @dev id and owner will be set automatically\\n     */\\n    function createAdSpace(\\n        string memory _name,\\n        string memory _website,\\n        string memory _asking_price,\\n        uint8 _numNFTs,\\n        string memory _size\\n    ) external payable {\\n        AdSpace _adspace = new AdSpace(\\n            _name,\\n            \\\"$ADSPACE\\\",\\n            _counter_adspaces,\\n            msg.sender,\\n            //_adspaceOwner,\\n            _numNFTs\\n        );\\n        string memory sqlStatement = string.concat(\\n            \\\"INSERT INTO \\\",\\n            _adSpaceTable,\\n            \\\" (name,website,verified,status,owner,contract,asking_price,size) VALUES ('\\\",\\n            _name,\\n            \\\"','\\\",\\n            _website,\\n            \\\"','\\\",\\n            \\\"0\\\", //verified\\n            \\\"','\\\",\\n            \\\"Pending Verification\\\", // status\\n            \\\"','\\\",\\n            Strings.toHexString(uint256(uint160(address(msg.sender))), 20), // owner\\n            \\\"','\\\",\\n            Strings.toHexString(uint256(uint160(address(_adspace))), 20), // contract\\n            \\\"','\\\",\\n            _asking_price,\\n            \\\"','\\\",\\n            _size,\\n            \\\"');\\\"\\n        );\\n\\n        _runSQL(_adspacetableid, sqlStatement);\\n        _counter_adspaces++;\\n        emit AdSpaceCreated(address(_adspace));\\n    }\\n\\n    /**\\n     * @notice Creating Deal and inserting row on Tableland\\n     * @notice after creating the deal, the Adspace Table will update on the affected row\\n     * @param _adspaceId id of the affected AdSpace\\n     * @param _price negotiated price for the deal\\n     * @param _end_at ending timestamp (UNIX)\\n     * @param _campaignId id of the affected campaign\\n     */\\n    function createDeal(\\n        uint256 _adspaceId,\\n        uint256 _price,\\n        uint40 _end_at,\\n        uint256 _campaignId\\n    ) external payable returns (uint256) {\\n        string memory sqlCreateDeal = string.concat(\\n            \\\"INSERT INTO \\\",\\n            _dealTable,\\n            \\\" (campaign_id_fk, adspace_id_fk, end_at, price, started_at) VALUES ('\\\",\\n            Strings.toString(_campaignId),\\n            \\\"','\\\",\\n            Strings.toString(_adspaceId),\\n            \\\"','\\\",\\n            Strings.toString(_end_at),\\n            \\\"','\\\",\\n            Strings.toString(_price),\\n            \\\"','\\\",\\n            Strings.toString(block.timestamp),\\n            \\\"');\\\"\\n        );\\n\\n        _runSQL(_dealtableid, sqlCreateDeal);\\n        _counter_deals++;\\n        emit DealCreated(_counter_deals, _campaignId, _adspaceId);\\n\\n        ///@notice update the Adspace Tableland table\\n        string memory sqlUpdateAdspace = string.concat(\\n            \\\"UPDATE \\\",\\n            _adSpaceTable,\\n            \\\" SET status ='Running Ads' WHERE adspace_id = '\\\",\\n            Strings.toString(_adspaceId),\\n            \\\"';\\\"\\n        );\\n        _runSQL(_adspacetableid, sqlUpdateAdspace);\\n        emit AdSpaceUpdated(_adspaceId);\\n        return _counter_deals;\\n    }\\n\\n    /**\\n     * @notice Creating a Campaign and inserting row on Tableland\\n     * @param cid id of the affected AdSpace\\n     * @param size negotiated price for the deal\\n     * @param link ending timestamp (UNIX)\\n     * @dev owner will be auto assigned to msg.sender\\n     */\\n    function createCampaign(\\n        string memory name,\\n        string memory cid,\\n        string memory size,\\n        string memory link\\n    ) external payable {\\n        string memory sqlCreateCampagin = string.concat(\\n            \\\"INSERT INTO \\\",\\n            _campaignTable,\\n            \\\" (name, cid, size, link, owner) VALUES ('\\\",\\n            name,\\n            \\\"','\\\",\\n            cid,\\n            \\\"','\\\",\\n            size,\\n            \\\"','\\\",\\n            link,\\n            \\\"','\\\",\\n            Strings.toHexString(uint256(uint160(address(msg.sender))), 20),\\n            \\\"');\\\"\\n        );\\n        _runSQL(_campaigntableid, sqlCreateCampagin);\\n        _counter_campaigns++;\\n        emit CampaignCreated(_counter_campaigns);\\n    }\\n\\n    function verifyAdSpace(uint256 _adspaceId) public onlyOwner {\\n        ///@notice update the Adspace Tableland table\\n        string memory sqlUpdateAdspace = string.concat(\\n            \\\"UPDATE \\\",\\n            _adSpaceTable,\\n            \\\" SET verified = '1', status = 'Available' WHERE adspace_id = '\\\",\\n            Strings.toString(_adspaceId),\\n            \\\"';\\\"\\n        );\\n        _runSQL(_adspacetableid, sqlUpdateAdspace);\\n        emit AdSpaceUpdated(_adspaceId);\\n    }\\n\\n    ///@dev internal function to be only called by this Factory\\n    function _createTable(string memory statement) internal returns (uint256) {\\n        return _tableland.createTable(address(this), statement);\\n    }\\n\\n    ///@dev internal function to be only called by this Factory\\n    function _runSQL(uint256 tableId, string memory statement) internal {\\n        _tableland.runSQL(address(this), tableId, statement);\\n    }\\n\\n    ///@return uint256 the id of the current AdSpace Table of this AdSpaceFactory\\n    function getAdSpaceTableId() external view returns (uint256) {\\n        return _adspacetableid;\\n    }\\n\\n    ///@return uint256 the id of the current Campaign Table of this AdSpaceFactory\\n    function getCampaignTableId() external view returns (uint256) {\\n        return _campaigntableid;\\n    }\\n\\n    ///@return uint256 the id of the current Deal Table of this AdSpaceFactory\\n    function getDealTableId() external view returns (uint256) {\\n        return _dealtableid;\\n    }\\n\\n    ///@return uint256 the full name of the current AdSpace Table of this AdSpaceFactory\\n    function getAdSpaceTable() external view returns (string memory) {\\n        return _adSpaceTable;\\n    }\\n\\n    ///@return uint256 the full name of the current Campaign Table of this AdSpaceFactory\\n    function getCampaignTable() external view returns (string memory) {\\n        return _campaignTable;\\n    }\\n\\n    ///@return uint256 he full name of the current Deal Table of this AdSpaceFactory\\n    function getDealTable() external view returns (string memory) {\\n        return _dealTable;\\n    }\\n\\n    ///@param i the identifier (number) of the Adspace interested in\\n    ///@return address the addess of the AdSpace Contract with identifier i\\n    function getAdSpaceAddress(uint256 i) external view returns (address) {\\n        return Adspaces[i];\\n    }\\n\\n    ///@return uint256 the current amount of Adspaces created by this Factory\\n    function getCounterAdSpaces() external view returns (uint256) {\\n        return _counter_adspaces;\\n    }\\n}\\n\",\"keccak256\":\"0x22cebe688a5d52a041bd85809c08624383ed15ff8edbb4ea6bf80fa363c5b998\",\"license\":\"MIT\"},\"contracts/ITablelandController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev Interface of a TablelandController compliant contract.\\n *\\n * This interface can be implemented to enabled advanced access control for a table.\\n * Call {ITablelandTables-setController} with the address of your implementation.\\n *\\n * See {test/TestTablelandController} for an example of token-gating table write-access.\\n */\\ninterface ITablelandController {\\n    /**\\n     * @dev Object defining how a table can be accessed.\\n     */\\n    struct Policy {\\n        // Whether or not the table should allow SQL INSERT statements.\\n        bool allowInsert;\\n        // Whether or not the table should allow SQL UPDATE statements.\\n        bool allowUpdate;\\n        // Whether or not the table should allow SQL DELETE statements.\\n        bool allowDelete;\\n        // A conditional clause used with SQL UPDATE and DELETE statements.\\n        // For example, a value of \\\"foo > 0\\\" will concatenate all SQL UPDATE\\n        // and/or DELETE statements with \\\"WHERE foo > 0\\\".\\n        // This can be useful for limiting how a table can be modified.\\n        // Use {Policies-joinClauses} to include more than one condition.\\n        string whereClause;\\n        // A conditional clause used with SQL INSERT statements.\\n        // For example, a value of \\\"foo > 0\\\" will concatenate all SQL INSERT\\n        // statements with a check on the incoming data, i.e., \\\"CHECK (foo > 0)\\\".\\n        // This can be useful for limiting how table data ban be added.\\n        // Use {Policies-joinClauses} to include more than one condition.\\n        string withCheck;\\n        // A list of SQL column names that can be updated.\\n        string[] updatableColumns;\\n    }\\n\\n    /**\\n     * @dev Returns a {Policy} struct defining how a table can be accessed by `caller`.\\n     */\\n    function getPolicy(address caller) external payable returns (Policy memory);\\n}\\n\",\"keccak256\":\"0xda5f7e8144be7322e66e0f6652e040d2e8409345843d225efdd11adf05cddf1d\",\"license\":\"MIT\"},\"contracts/ITablelandTables.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./ITablelandController.sol\\\";\\n\\n/**\\n * @dev Interface of a TablelandTables compliant contract.\\n */\\ninterface ITablelandTables {\\n    /**\\n     * The caller is not authorized.\\n     */\\n    error Unauthorized();\\n\\n    /**\\n     * RunSQL was called with a query length greater than maximum allowed.\\n     */\\n    error MaxQuerySizeExceeded(uint256 querySize, uint256 maxQuerySize);\\n\\n    /**\\n     * @dev Emitted when `owner` creates a new table.\\n     *\\n     * owner - the to-be owner of the table\\n     * tableId - the table id of the new table\\n     * statement - the SQL statement used to create the table\\n     */\\n    event CreateTable(address owner, uint256 tableId, string statement);\\n\\n    /**\\n     * @dev Emitted when a table is transferred from `from` to `to`.\\n     *\\n     * Not emmitted when a table is created.\\n     * Also emitted after a table has been burned.\\n     *\\n     * from - the address that transfered the table\\n     * to - the address that received the table\\n     * tableId - the table id that was transferred\\n     */\\n    event TransferTable(address from, address to, uint256 tableId);\\n\\n    /**\\n     * @dev Emitted when `caller` runs a SQL statement.\\n     *\\n     * caller - the address that is running the SQL statement\\n     * isOwner - whether or not the caller is the table owner\\n     * tableId - the id of the target table\\n     * statement - the SQL statement to run\\n     * policy - an object describing how `caller` can interact with the table (see {ITablelandController.Policy})\\n     */\\n    event RunSQL(\\n        address caller,\\n        bool isOwner,\\n        uint256 tableId,\\n        string statement,\\n        ITablelandController.Policy policy\\n    );\\n\\n    /**\\n     * @dev Emitted when a table's controller is set.\\n     *\\n     * tableId - the id of the target table\\n     * controller - the address of the controller (EOA or contract)\\n     */\\n    event SetController(uint256 tableId, address controller);\\n\\n    /**\\n     * @dev Creates a new table owned by `owner` using `statement` and returns its `tableId`.\\n     *\\n     * owner - the to-be owner of the new table\\n     * statement - the SQL statement used to create the table\\n     *\\n     * Requirements:\\n     *\\n     * - contract must be unpaused\\n     */\\n    function createTable(address owner, string memory statement)\\n        external\\n        payable\\n        returns (uint256);\\n\\n    /**\\n     * @dev Runs a SQL statement for `caller` using `statement`.\\n     *\\n     * caller - the address that is running the SQL statement\\n     * tableId - the id of the target table\\n     * statement - the SQL statement to run\\n     *\\n     * Requirements:\\n     *\\n     * - contract must be unpaused\\n     * - `msg.sender` must be `caller` or contract owner\\n     * - `tableId` must exist\\n     * - `caller` must be authorized by the table controller\\n     * - `statement` must be less than or equal to 35000 bytes\\n     */\\n    function runSQL(\\n        address caller,\\n        uint256 tableId,\\n        string memory statement\\n    ) external payable;\\n\\n    /**\\n     * @dev Sets the controller for a table. Controller can be an EOA or contract address.\\n     *\\n     * When a table is created, it's controller is set to the zero address, which means that the\\n     * contract will not enforce write access control. In this situation, validators will not accept\\n     * transactions from non-owners unless explicitly granted access with \\\"GRANT\\\" SQL statements.\\n     *\\n     * When a controller address is set for a table, validators assume write access control is\\n     * handled at the contract level, and will accept all transactions.\\n     *\\n     * You can unset a controller address for a table by setting it back to the zero address.\\n     * This will cause validators to revert back to honoring owner and GRANT bases write access control.\\n     *\\n     * caller - the address that is setting the controller\\n     * tableId - the id of the target table\\n     * controller - the address of the controller (EOA or contract)\\n     *\\n     * Requirements:\\n     *\\n     * - contract must be unpaused\\n     * - `msg.sender` must be `caller` or contract owner and owner of `tableId`\\n     * - `tableId` must exist\\n     * - `tableId` controller must not be locked\\n     */\\n    function setController(\\n        address caller,\\n        uint256 tableId,\\n        address controller\\n    ) external;\\n\\n    /**\\n     * @dev Returns the controller for a table.\\n     *\\n     * tableId - the id of the target table\\n     */\\n    function getController(uint256 tableId) external returns (address);\\n\\n    /**\\n     * @dev Locks the controller for a table _forever_. Controller can be an EOA or contract address.\\n     *\\n     * Although not very useful, it is possible to lock a table controller that is set to the zero address.\\n     *\\n     * caller - the address that is locking the controller\\n     * tableId - the id of the target table\\n     *\\n     * Requirements:\\n     *\\n     * - contract must be unpaused\\n     * - `msg.sender` must be `caller` or contract owner and owner of `tableId`\\n     * - `tableId` must exist\\n     * - `tableId` controller must not be locked\\n     */\\n    function lockController(address caller, uint256 tableId) external;\\n\\n    /**\\n     * @dev Sets the contract base URI.\\n     *\\n     * baseURI - the new base URI\\n     *\\n     * Requirements:\\n     *\\n     * - `msg.sender` must be contract owner\\n     */\\n    function setBaseURI(string memory baseURI) external;\\n\\n    /**\\n     * @dev Pauses the contract.\\n     *\\n     * Requirements:\\n     *\\n     * - `msg.sender` must be contract owner\\n     * - contract must be unpaused\\n     */\\n    function pause() external;\\n\\n    /**\\n     * @dev Unpauses the contract.\\n     *\\n     * Requirements:\\n     *\\n     * - `msg.sender` must be contract owner\\n     * - contract must be paused\\n     */\\n    function unpause() external;\\n}\\n\",\"keccak256\":\"0x597bb13cc0f1990cee44a423601b16a383fd9a405874eed18f7d5045a9cffa2f\",\"license\":\"MIT\"},\"contracts/Interfaces/DaiToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\ninterface DaiToken {\\n    function transfer(address dst, uint wad) external returns (bool);\\n\\n    function transferFrom(\\n        address src,\\n        address dst,\\n        uint wad\\n    ) external returns (bool);\\n\\n    function balanceOf(address guy) external view returns (uint);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    function allowance(address spender) external returns (uint);\\n}\\n\",\"keccak256\":\"0x69e2af22f0ea6254a655d6421fdd874a5d6cab4bdd57f1e032984b989d77d2fd\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405260043610620001075760003560e01c8063a92f40061162000095578063c4d949031162000060578063c4d94903146200029f578063cf78aa7c14620002b7578063f2fde38b14620002ce578063f942aad114620002f357600080fd5b8063a92f40061462000232578063b47234401462000249578063b4b0310f1462000260578063b834044c146200028757600080fd5b8063715018a611620000d6578063715018a614620001aa578063863acc2d14620001c25780638da5cb5b14620001e7578063a46b2ea5146200021b57600080fd5b8063150b7a02146200010c578063412861b914620001595780635d6b036d146200017a5780636193d5411462000193575b600080fd5b3480156200011957600080fd5b506200013b6200012b36600462000ca2565b630a85bd0160e11b949350505050565b6040516001600160e01b031990911681526020015b60405180910390f35b3480156200016657600080fd5b506006545b60405190815260200162000150565b620001916200018b36600462000d51565b62000318565b005b348015620001a057600080fd5b506002546200016b565b348015620001b757600080fd5b5062000191620003ad565b348015620001cf57600080fd5b5062000191620001e136600462000dff565b620003c5565b348015620001f457600080fd5b506000546001600160a01b03165b6040516001600160a01b03909116815260200162000150565b3480156200022857600080fd5b506004546200016b565b620001916200024336600462000e19565b6200043f565b6200016b6200025a36600462000eef565b6200053a565b3480156200026d57600080fd5b506200027862000674565b60405162000150919062000f8e565b3480156200029457600080fd5b50620002786200070e565b348015620002ac57600080fd5b50620002786200071f565b348015620002c457600080fd5b506008546200016b565b348015620002db57600080fd5b5062000191620002ed36600462000fa3565b62000730565b3480156200030057600080fd5b50620002026200031236600462000dff565b620007b3565b60006005858585856200032d33601462000907565b6040516020016200034496959493929190620010c0565b6040516020818303038152906040529050620003636004548262000aca565b600980549060006200037583620011e3565b90915550506009546040517fbc0a5edd152fa5b886dcae82c5c109d113708653b4b9c0224549ccdf715af94e90600090a25050505050565b620003b762000b38565b620003c3600062000b94565b565b620003cf62000b38565b60006003620003de83620007e6565b604051602001620003f1929190620011ff565b6040516020818303038152906040529050620004106002548262000aca565b60405182907fdf6133baa6089c4a19ab9a4892b1163e533f741b01f4e4604c738c02fac47d7790600090a25050565b6000856008543385604051620004559062000be4565b62000464949392919062001296565b604051809103906000f08015801562000481573d6000803e3d6000fd5b5090506000600387876200049733601462000907565b620004ad866001600160a01b0316601462000907565b8988604051602001620004c79796959493929190620012f5565b6040516020818303038152906040529050620004e66002548262000aca565b60088054906000620004f883620011e3565b90915550506040516001600160a01b038316907f2e681b0bce38884fe3d327a27588b0edcdfcedd63d1e1ba737f37c04ba29cdf290600090a250505050505050565b60008060076200054a84620007e6565b6200055588620007e6565b620005678764ffffffffff16620007e6565b6200057289620007e6565b6200057d42620007e6565b604051602001620005949695949392919062001459565b6040516020818303038152906040529050620005b36006548262000aca565b600a8054906000620005c583620011e3565b9091555050600a54604051879185917f513a1504cb2af4e1c25fe1dddf73d9471d716dda4e84b8b626c63f0921c0035b90600090a4600060036200060988620007e6565b6040516020016200061c9291906200156a565b60405160208183030381529060405290506200063b6002548262000aca565b60405187907fdf6133baa6089c4a19ab9a4892b1163e533f741b01f4e4604c738c02fac47d7790600090a25050600a5495945050505050565b606060058054620006859062000fc1565b80601f0160208091040260200160405190810160405280929190818152602001828054620006b39062000fc1565b8015620007045780601f10620006d85761010080835404028352916020019162000704565b820191906000526020600020905b815481529060010190602001808311620006e657829003601f168201915b5050505050905090565b606060078054620006859062000fc1565b606060038054620006859062000fc1565b6200073a62000b38565b6001600160a01b038116620007a55760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b620007b08162000b94565b50565b6000600b8281548110620007cb57620007cb620015f3565b6000918252602090912001546001600160a01b031692915050565b6060816000036200080e5750506040805180820190915260018152600360fc1b602082015290565b8160005b81156200083e57806200082581620011e3565b9150620008369050600a836200161f565b915062000812565b60008167ffffffffffffffff8111156200085c576200085c62000c0f565b6040519080825280601f01601f19166020018201604052801562000887576020820181803683370190505b5090505b8415620008ff576200089f60018362001636565b9150620008ae600a866200164c565b620008bb90603062001663565b60f81b818381518110620008d357620008d3620015f3565b60200101906001600160f81b031916908160001a905350620008f7600a866200161f565b94506200088b565b949350505050565b606060006200091883600262001679565b6200092590600262001663565b67ffffffffffffffff81111562000940576200094062000c0f565b6040519080825280601f01601f1916602001820160405280156200096b576020820181803683370190505b509050600360fc1b81600081518110620009895762000989620015f3565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110620009bb57620009bb620015f3565b60200101906001600160f81b031916908160001a9053506000620009e184600262001679565b620009ee90600162001663565b90505b600181111562000a70576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811062000a265762000a26620015f3565b1a60f81b82828151811062000a3f5762000a3f620015f3565b60200101906001600160f81b031916908160001a90535060049490941c9362000a688162001693565b9050620009f1565b50831562000ac15760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016200079c565b90505b92915050565b60015460405163757ae82760e11b81526001600160a01b039091169063eaf5d04e9062000b0090309086908690600401620016ad565b600060405180830381600087803b15801562000b1b57600080fd5b505af115801562000b30573d6000803e3d6000fd5b505050505050565b6000546001600160a01b03163314620003c35760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016200079c565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b612cf880620016e083390190565b80356001600160a01b038116811462000c0a57600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff8084111562000c435762000c4362000c0f565b604051601f8501601f19908116603f0116810190828211818310171562000c6e5762000c6e62000c0f565b8160405280935085815286868601111562000c8857600080fd5b858560208301376000602087830101525050509392505050565b6000806000806080858703121562000cb957600080fd5b62000cc48562000bf2565b935062000cd46020860162000bf2565b925060408501359150606085013567ffffffffffffffff81111562000cf857600080fd5b8501601f8101871362000d0a57600080fd5b62000d1b8782356020840162000c25565b91505092959194509250565b600082601f83011262000d3957600080fd5b62000d4a8383356020850162000c25565b9392505050565b6000806000806080858703121562000d6857600080fd5b843567ffffffffffffffff8082111562000d8157600080fd5b62000d8f8883890162000d27565b9550602087013591508082111562000da657600080fd5b62000db48883890162000d27565b9450604087013591508082111562000dcb57600080fd5b62000dd98883890162000d27565b9350606087013591508082111562000df057600080fd5b5062000d1b8782880162000d27565b60006020828403121562000e1257600080fd5b5035919050565b600080600080600060a0868803121562000e3257600080fd5b853567ffffffffffffffff8082111562000e4b57600080fd5b62000e5989838a0162000d27565b9650602088013591508082111562000e7057600080fd5b62000e7e89838a0162000d27565b9550604088013591508082111562000e9557600080fd5b62000ea389838a0162000d27565b94506060880135915060ff8216821462000ebc57600080fd5b9092506080870135908082111562000ed357600080fd5b5062000ee28882890162000d27565b9150509295509295909350565b6000806000806080858703121562000f0657600080fd5b8435935060208501359250604085013564ffffffffff8116811462000f2a57600080fd5b9396929550929360600135925050565b60005b8381101562000f5757818101518382015260200162000f3d565b50506000910152565b6000815180845262000f7a81602086016020860162000f3a565b601f01601f19169290920160200192915050565b60208152600062000d4a602083018462000f60565b60006020828403121562000fb657600080fd5b62000d4a8262000bf2565b600181811c9082168062000fd657607f821691505b60208210810362000ff757634e487b7160e01b600052602260045260246000fd5b50919050565b8054600090600181811c90808316806200101857607f831692505b602080841082036200103a57634e487b7160e01b600052602260045260246000fd5b818015620010515760018114620010675762001096565b60ff198616895284151585028901965062001096565b60008881526020902060005b868110156200108e5781548b82015290850190830162001073565b505084890196505b50505050505092915050565b60008151620010b681856020860162000f3a565b9290920192915050565b6b024a729a2a92a1024a72a27960a51b81526000620010e3600c83018962000ffd565b7f20286e616d652c206369642c2073697a652c206c696e6b2c206f776e6572292081526856414c55455320282760b81b602082015287516200112d816029840160208c0162000f3a565b80820191505062272c2760e81b80602983015287516200115581602c850160208c0162000f3a565b602c920191820181905286516200117481602f850160208b0162000f3a565b602f92019182015284516200119181603284016020890162000f3a565b01620011a56032820162272c2760e81b9052565b620011b46035820185620010a2565b6227293b60e81b81526003019998505050505050505050565b634e487b7160e01b600052601160045260246000fd5b600060018201620011f857620011f8620011cd565b5060010190565b6602aa82220aa22960cd1b815260006200121d600783018562000ffd565b7f20534554207665726966696564203d202731272c20737461747573203d20274181527f7661696c61626c652720574845524520616473706163655f6964203d20270000602082015283516200127b81603e84016020880162000f3a565b61273b60f01b603e9290910191820152604001949350505050565b60a081526000620012ab60a083018762000f60565b82810360208401526008815267244144535041434560c01b60208201526040810191505084604083015260018060a01b038416606083015260ff8316608083015295945050505050565b6b024a729a2a92a1024a72a27960a51b8152600062001318600c83018a62000ffd565b7f20286e616d652c776562736974652c76657269666965642c7374617475732c6f81527f776e65722c636f6e74726163742c61736b696e675f70726963652c73697a65296020820152692056414c55455320282760b01b604082015262001383604a82018a620010a2565b62272c2760e81b8152905060036200139e8183018a620010a2565b62272c2760e81b81529150600360fc1b8282015262272c2760e81b6004830152732832b73234b733902b32b934b334b1b0ba34b7b760611b600783015262272c2760e81b601b830152620013f6601e830189620010a2565b62272c2760e81b815291506200140f81830188620010a2565b62272c2760e81b815291506200142881830187620010a2565b62272c2760e81b815291506200144181830186620010a2565b6227293b60e81b8152019a9950505050505050505050565b6b024a729a2a92a1024a72a27960a51b815260006200147c600c83018962000ffd565b7f202863616d706169676e5f69645f666b2c20616473706163655f69645f666b2c81527f20656e645f61742c2070726963652c20737461727465645f6174292056414c55602082015264455320282760d81b60408201528751620014e8816045840160208c0162000f3a565b80820191505062272c2760e81b806045830152875162001510816048850160208c0162000f3a565b604892019182015285516200152d81604b840160208a0162000f3a565b0162001541604b820162272c2760e81b9052565b62001550604e820186620010a2565b62272c2760e81b81529050620011b46003820185620010a2565b6602aa82220aa22960cd1b8152600062001588600783018562000ffd565b7f2053455420737461747573203d2752756e6e696e67204164732720574845524581526e20616473706163655f6964203d202760881b60208201528351620015d881602f84016020880162000f3a565b61273b60f01b602f9290910191820152603101949350505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601260045260246000fd5b60008262001631576200163162001609565b500490565b8181038181111562000ac45762000ac4620011cd565b6000826200165e576200165e62001609565b500690565b8082018082111562000ac45762000ac4620011cd565b808202811582820484141762000ac45762000ac4620011cd565b600081620016a557620016a5620011cd565b506000190190565b60018060a01b0384168152826020820152606060408201526000620016d6606083018462000f60565b9594505050505056fe60e0604052602160808181529062002cd760a039600a9062000022908262000882565b506014600b55600c805460ff19169055601080546001600160a01b0319167349cb5fa951ad2abbc4d14239bfe215754c7df0301790553480156200006557600080fd5b5060405162002cf838038062002cf8833981016040819052620000889162000a05565b8484600062000098838262000882565b506001620000a7828262000882565b505050600d839055600c8054610100600160a81b03191674da10009cbd5d07dd0cecc66161fc93d7c9000da10017905560118054336001600160a01b0319918216811790925560128054909116909117905560ff81166200010757600080fd5b8060ff16600b54116200011d57600b5462000122565b8060ff165b600b5560015b600b54811162000153576200013e83826200015f565b806200014a8162000acd565b91505062000128565b50505050505062000bd0565b620001818282604051806020016040528060008152506200018560201b60201c565b5050565b62000191838362000201565b620001a0600084848462000357565b620001fc5760405162461bcd60e51b8152602060048201526032602482015260008051602062002cb783398151915260448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b60648201526084015b60405180910390fd5b505050565b6001600160a01b038216620002595760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401620001f3565b6000818152600260205260409020546001600160a01b031615620002c05760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401620001f3565b620002ce60008383620004b3565b6001600160a01b0382166000908152600360205260408120805460019290620002f990849062000ae9565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b600062000378846001600160a01b03166200058f60201b620012251760201c565b15620004a757604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290620003b290339089908890889060040162000b05565b6020604051808303816000875af1925050508015620003f0575060408051601f3d908101601f19168201909252620003ed9181019062000b5b565b60015b6200048c573d80801562000421576040519150601f19603f3d011682016040523d82523d6000602084013e62000426565b606091505b508051600003620004845760405162461bcd60e51b8152602060048201526032602482015260008051602062002cb783398151915260448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b6064820152608401620001f3565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050620004ab565b5060015b949350505050565b620004cb838383620001fc60201b620008901760201c565b6001600160a01b03831662000529576200052381600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b6200054f565b816001600160a01b0316836001600160a01b0316146200054f576200054f83826200059e565b6001600160a01b0382166200056957620001fc816200064b565b826001600160a01b0316826001600160a01b031614620001fc57620001fc828262000705565b6001600160a01b03163b151590565b60006001620005b8846200075660201b62000e5a1760201c565b620005c4919062000b8e565b60008381526007602052604090205490915080821462000618576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b6008546000906200065f9060019062000b8e565b600083815260096020526040812054600880549394509092849081106200068a576200068a62000ba4565b906000526020600020015490508060088381548110620006ae57620006ae62000ba4565b6000918252602080832090910192909255828152600990915260408082208490558582528120556008805480620006e957620006e962000bba565b6001900381819060005260206000200160009055905550505050565b60006200071d836200075660201b62000e5a1760201c565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b60006001600160a01b038216620007c25760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b6064820152608401620001f3565b506001600160a01b031660009081526003602052604090205490565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806200080957607f821691505b6020821081036200082a57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620001fc57600081815260208120601f850160051c81016020861015620008595750805b601f850160051c820191505b818110156200087a5782815560010162000865565b505050505050565b81516001600160401b038111156200089e576200089e620007de565b620008b681620008af8454620007f4565b8462000830565b602080601f831160018114620008ee5760008415620008d55750858301515b600019600386901b1c1916600185901b1785556200087a565b600085815260208120601f198616915b828110156200091f57888601518255948401946001909101908401620008fe565b50858210156200093e5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60005b838110156200096b57818101518382015260200162000951565b50506000910152565b600082601f8301126200098657600080fd5b81516001600160401b0380821115620009a357620009a3620007de565b604051601f8301601f19908116603f01168101908282118183101715620009ce57620009ce620007de565b81604052838152866020858801011115620009e857600080fd5b620009fb8460208301602089016200094e565b9695505050505050565b600080600080600060a0868803121562000a1e57600080fd5b85516001600160401b038082111562000a3657600080fd5b62000a4489838a0162000974565b9650602088015191508082111562000a5b57600080fd5b5062000a6a8882890162000974565b60408801516060890151919650945090506001600160a01b038116811462000a9157600080fd5b608087015190925060ff8116811462000aa957600080fd5b809150509295509295909350565b634e487b7160e01b600052601160045260246000fd5b60006001820162000ae25762000ae262000ab7565b5060010190565b8082018082111562000aff5762000aff62000ab7565b92915050565b600060018060a01b03808716835280861660208401525083604083015260806060830152825180608084015262000b448160a08501602087016200094e565b601f01601f19169190910160a00195945050505050565b60006020828403121562000b6e57600080fd5b81516001600160e01b03198116811462000b8757600080fd5b9392505050565b8181038181111562000aff5762000aff62000ab7565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052603160045260246000fd5b6120d78062000be06000396000f3fe6080604052600436106101ee5760003560e01c806370a082311161010d578063bdfa03de116100a0578063cb4378811161006f578063cb4378811461059c578063d5abeb01146105e6578063db2e21bc146105fc578063e985e9c514610604578063f302315d1461064d57600080fd5b8063bdfa03de14610521578063be22f54614610537578063c5cc6b6a1461055c578063c87b56dd1461057c57600080fd5b8063a22cb465116100dc578063a22cb46514610494578063b410908d146104b4578063b88d4fde146104d4578063bbe6dbdb146104f457600080fd5b806370a082311461041f5780638f5c26101461043f5780639574b5471461045f57806395d89b411461047f57600080fd5b80632f745c591161018557806355f804b31161015457806355f804b3146103b05780635c975abb146103d05780636352211e146103ea5780636c0360eb1461040a57600080fd5b80632f745c591461032357806342842e0e14610343578063438b6300146103635780634f6ccce71461039057600080fd5b8063095ea7b3116101c1578063095ea7b3146102a457806318160ddd146102c457806323b872dd146102e35780632e1a7d4d1461030357600080fd5b806301ffc9a7146101f357806302329a291461022857806306fdde031461024a578063081812fc1461026c575b600080fd5b3480156101ff57600080fd5b5061021361020e3660046119e6565b61066d565b60405190151581526020015b60405180910390f35b34801561023457600080fd5b50610248610243366004611a18565b610698565b005b34801561025657600080fd5b5061025f6106c2565b60405161021f9190611a7b565b34801561027857600080fd5b5061028c610287366004611a8e565b610754565b6040516001600160a01b03909116815260200161021f565b3480156102b057600080fd5b506102486102bf366004611ac3565b61077b565b3480156102d057600080fd5b506008545b60405190815260200161021f565b3480156102ef57600080fd5b506102486102fe366004611aed565b610895565b34801561030f57600080fd5b5061024861031e366004611a8e565b6108c6565b34801561032f57600080fd5b506102d561033e366004611ac3565b610b5f565b34801561034f57600080fd5b5061024861035e366004611aed565b610bf5565b34801561036f57600080fd5b5061038361037e366004611b29565b610c10565b60405161021f9190611b44565b34801561039c57600080fd5b506102d56103ab366004611a8e565b610cb2565b3480156103bc57600080fd5b506102486103cb366004611c14565b610d45565b3480156103dc57600080fd5b50600c546102139060ff1681565b3480156103f657600080fd5b5061028c610405366004611a8e565b610d6c565b34801561041657600080fd5b5061025f610dcc565b34801561042b57600080fd5b506102d561043a366004611b29565b610e5a565b34801561044b57600080fd5b5061024861045a366004611b29565b610ee0565b34801561046b57600080fd5b5061024861047a366004611c5d565b610f19565b34801561048b57600080fd5b5061025f6110d2565b3480156104a057600080fd5b506102486104af366004611c89565b6110e1565b3480156104c057600080fd5b5060105461028c906001600160a01b031681565b3480156104e057600080fd5b506102486104ef366004611cc0565b6110ec565b34801561050057600080fd5b506102d561050f366004611a8e565b600f6020526000908152604090205481565b34801561052d57600080fd5b506102d5600d5481565b34801561054357600080fd5b50600c5461028c9061010090046001600160a01b031681565b34801561056857600080fd5b5060125461028c906001600160a01b031681565b34801561058857600080fd5b5061025f610597366004611a8e565b611124565b3480156105a857600080fd5b506105d06105b7366004611a8e565b600e6020526000908152604090205464ffffffffff1681565b60405164ffffffffff909116815260200161021f565b3480156105f257600080fd5b506102d5600b5481565b6102486111ab565b34801561061057600080fd5b5061021361061f366004611d3c565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b34801561065957600080fd5b5060115461028c906001600160a01b031681565b60006001600160e01b0319821663780e9d6360e01b1480610692575061069282611234565b92915050565b6010546001600160a01b031633146106af57600080fd5b600c805460ff1916911515919091179055565b6060600080546106d190611d6f565b80601f01602080910402602001604051908101604052809291908181526020018280546106fd90611d6f565b801561074a5780601f1061071f5761010080835404028352916020019161074a565b820191906000526020600020905b81548152906001019060200180831161072d57829003601f168201915b5050505050905090565b600061075f82611284565b506000908152600460205260409020546001600160a01b031690565b600061078682610d6c565b9050806001600160a01b0316836001600160a01b0316036107f85760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b03821614806108145750610814813361061f565b6108865760405162461bcd60e51b815260206004820152603e60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c000060648201526084016107ef565b61089083836112e3565b505050565b61089f3382611351565b6108bb5760405162461bcd60e51b81526004016107ef90611da9565b6108908383836113d0565b600060015b600b5481116109095760006108df82610d6c565b9050336001600160a01b038216036108f657600192505b508061090181611e0d565b9150506108cb565b5060018115151461095c5760405162461bcd60e51b815260206004820152601a60248201527f596f7520617265206e6f7420616e204e465420486f6c6465722100000000000060448201526064016107ef565b6000828152600e60205260409020544264ffffffffff909116111561098057600080fd5b6000828152600f60205260408120549061099b606483611e26565b905060006109a98284611e48565b600c5460105460405163a9059cbb60e01b81526001600160a01b03918216600482015260248101869052929350610100909104169063a9059cbb906044016020604051808303816000875af1158015610a06573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a2a9190611e5b565b506000600b5482610a3b9190611e26565b905060015b600b548111610b2f576000610a5482610d6c565b600c5460405163a9059cbb60e01b81526001600160a01b038084166004830152602482018790529293506101009091049091169063a9059cbb906044016020604051808303816000875af1158015610ab0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad49190611e5b565b50600d5488826001600160a01b03167fe1c901fee1a2719d235ef5a378ad022b95d70e793277219a0dd8f0db32085fa786604051610b1491815260200190565b60405180910390a45080610b2781611e0d565b915050610a40565b50505060009384525050600e60209081526040808420805464ffffffffff19169055600f90915282209190915550565b6000610b6a83610e5a565b8210610bcc5760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b60648201526084016107ef565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b610890838383604051806020016040528060008152506110ec565b60606000610c1d83610e5a565b905060008167ffffffffffffffff811115610c3a57610c3a611b88565b604051908082528060200260200182016040528015610c63578160200160208202803683370190505b50905060005b82811015610caa57610c7b8582610b5f565b828281518110610c8d57610c8d611e78565b602090810291909101015280610ca281611e0d565b915050610c69565b509392505050565b6000610cbd60085490565b8210610d205760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b60648201526084016107ef565b60088281548110610d3357610d33611e78565b90600052602060002001549050919050565b6010546001600160a01b03163314610d5c57600080fd5b600a610d688282611edc565b5050565b6000818152600260205260408120546001600160a01b0316806106925760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b60448201526064016107ef565b600a8054610dd990611d6f565b80601f0160208091040260200160405190810160405280929190818152602001828054610e0590611d6f565b8015610e525780601f10610e2757610100808354040283529160200191610e52565b820191906000526020600020905b815481529060010190602001808311610e3557829003601f168201915b505050505081565b60006001600160a01b038216610ec45760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b60648201526084016107ef565b506001600160a01b031660009081526003602052604090205490565b6010546001600160a01b03163314610ef757600080fd5b601080546001600160a01b0319166001600160a01b0392909216919091179055565b600c546040516323b872dd60e01b8152336004820152306024820152604481018590526101009091046001600160a01b0316906323b872dd906064016020604051808303816000875af1158015610f74573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f989190611e5b565b50601254600d546000916001600160a01b03169063b47234409086610fbf87610e10611f9c565b610fc99042611fb3565b6040516001600160e01b031960e086901b1681526004810193909352602483019190915264ffffffffff166044820152606481018590526084016020604051808303816000875af1158015611022573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110469190611fc6565b905061105483610e10611f9c565b61105e9042611fb3565b6000828152600e60209081526040808320805464ffffffffff191664ffffffffff9590951694909417909355600f815290829020869055600d549151868152839133917ffd9b0439bb28997e68e901ea689d5ef7483ddcb02a1be0ccab7b8c2bb261f710910160405180910390a450505050565b6060600180546106d190611d6f565b610d68338383611577565b6110f63383611351565b6111125760405162461bcd60e51b81526004016107ef90611da9565b61111e84848484611645565b50505050565b6000818152600260205260409020546060906001600160a01b03166111a35760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b60648201526084016107ef565b610692611678565b6010546001600160a01b031633146111c257600080fd5b6011546040516000916001600160a01b03169047908381818185875af1925050503d806000811461120f576040519150601f19603f3d011682016040523d82523d6000602084013e611214565b606091505b505090508061122257600080fd5b50565b6001600160a01b03163b151590565b60006001600160e01b031982166380ac58cd60e01b148061126557506001600160e01b03198216635b5e139f60e01b145b8061069257506301ffc9a760e01b6001600160e01b0319831614610692565b6000818152600260205260409020546001600160a01b03166112225760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b60448201526064016107ef565b600081815260046020526040902080546001600160a01b0319166001600160a01b038416908117909155819061131882610d6c565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60008061135d83610d6c565b9050806001600160a01b0316846001600160a01b031614806113a457506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b806113c85750836001600160a01b03166113bd84610754565b6001600160a01b0316145b949350505050565b826001600160a01b03166113e382610d6c565b6001600160a01b0316146114475760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b60648201526084016107ef565b6001600160a01b0382166114a95760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016107ef565b6114b4838383611687565b6114bf6000826112e3565b6001600160a01b03831660009081526003602052604081208054600192906114e8908490611e48565b90915550506001600160a01b0382166000908152600360205260408120805460019290611516908490611fb3565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b816001600160a01b0316836001600160a01b0316036115d85760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016107ef565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6116508484846113d0565b61165c8484848461173f565b61111e5760405162461bcd60e51b81526004016107ef90611fdf565b6060600a80546106d190611d6f565b6001600160a01b0383166116e2576116dd81600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b611705565b816001600160a01b0316836001600160a01b031614611705576117058382611840565b6001600160a01b03821661171c57610890816118dd565b826001600160a01b0316826001600160a01b03161461089057610890828261198c565b60006001600160a01b0384163b1561183557604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290611783903390899088908890600401612031565b6020604051808303816000875af19250505080156117be575060408051601f3d908101601f191682019092526117bb9181019061206e565b60015b61181b573d8080156117ec576040519150601f19603f3d011682016040523d82523d6000602084013e6117f1565b606091505b5080516000036118135760405162461bcd60e51b81526004016107ef90611fdf565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506113c8565b506001949350505050565b6000600161184d84610e5a565b6118579190611e48565b6000838152600760205260409020549091508082146118aa576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b6008546000906118ef90600190611e48565b6000838152600960205260408120546008805493945090928490811061191757611917611e78565b90600052602060002001549050806008838154811061193857611938611e78565b60009182526020808320909101929092558281526009909152604080822084905585825281205560088054806119705761197061208b565b6001900381819060005260206000200160009055905550505050565b600061199783610e5a565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b6001600160e01b03198116811461122257600080fd5b6000602082840312156119f857600080fd5b8135611a03816119d0565b9392505050565b801515811461122257600080fd5b600060208284031215611a2a57600080fd5b8135611a0381611a0a565b6000815180845260005b81811015611a5b57602081850181015186830182015201611a3f565b506000602082860101526020601f19601f83011685010191505092915050565b602081526000611a036020830184611a35565b600060208284031215611aa057600080fd5b5035919050565b80356001600160a01b0381168114611abe57600080fd5b919050565b60008060408385031215611ad657600080fd5b611adf83611aa7565b946020939093013593505050565b600080600060608486031215611b0257600080fd5b611b0b84611aa7565b9250611b1960208501611aa7565b9150604084013590509250925092565b600060208284031215611b3b57600080fd5b611a0382611aa7565b6020808252825182820181905260009190848201906040850190845b81811015611b7c57835183529284019291840191600101611b60565b50909695505050505050565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff80841115611bb957611bb9611b88565b604051601f8501601f19908116603f01168101908282118183101715611be157611be1611b88565b81604052809350858152868686011115611bfa57600080fd5b858560208301376000602087830101525050509392505050565b600060208284031215611c2657600080fd5b813567ffffffffffffffff811115611c3d57600080fd5b8201601f81018413611c4e57600080fd5b6113c884823560208401611b9e565b600080600060608486031215611c7257600080fd5b505081359360208301359350604090920135919050565b60008060408385031215611c9c57600080fd5b611ca583611aa7565b91506020830135611cb581611a0a565b809150509250929050565b60008060008060808587031215611cd657600080fd5b611cdf85611aa7565b9350611ced60208601611aa7565b925060408501359150606085013567ffffffffffffffff811115611d1057600080fd5b8501601f81018713611d2157600080fd5b611d3087823560208401611b9e565b91505092959194509250565b60008060408385031215611d4f57600080fd5b611d5883611aa7565b9150611d6660208401611aa7565b90509250929050565b600181811c90821680611d8357607f821691505b602082108103611da357634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252602e908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526d1c881b9bdc88185c1c1c9bdd995960921b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b600060018201611e1f57611e1f611df7565b5060010190565b600082611e4357634e487b7160e01b600052601260045260246000fd5b500490565b8181038181111561069257610692611df7565b600060208284031215611e6d57600080fd5b8151611a0381611a0a565b634e487b7160e01b600052603260045260246000fd5b601f82111561089057600081815260208120601f850160051c81016020861015611eb55750805b601f850160051c820191505b81811015611ed457828155600101611ec1565b505050505050565b815167ffffffffffffffff811115611ef657611ef6611b88565b611f0a81611f048454611d6f565b84611e8e565b602080601f831160018114611f3f5760008415611f275750858301515b600019600386901b1c1916600185901b178555611ed4565b600085815260208120601f198616915b82811015611f6e57888601518255948401946001909101908401611f4f565b5085821015611f8c5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b808202811582820484141761069257610692611df7565b8082018082111561069257610692611df7565b600060208284031215611fd857600080fd5b5051919050565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061206490830184611a35565b9695505050505050565b60006020828403121561208057600080fd5b8151611a03816119d0565b634e487b7160e01b600052603160045260246000fdfea2646970667358221220bce876d4f78438c62372f24d4260ec63144d937cae2502c2bf49bd3629d4ab9064736f6c634300081100334552433732313a207472616e7366657220746f206e6f6e20455243373231526568747470733a2f2f61647370616365732e78797a2f616473706163652e6a736f6ea2646970667358221220e10c736d2bc02e3718e6231eed9dd98aade8d6c4ebf15bdac81a7fd08a00a9b364736f6c63430008110033",
  "devdoc": {
    "details": "when deploying make sure to get the right Tableland contract for desired chainupon deployment this contract creates three Tableland Tables:AdSpaces_{chain}_{tableID}, Campaigns_{chain}_{tableID}, Deals_{chain}_{tableID}Custom errors need to be added...",
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "tablelandAddress": "see docs.tableland.xyz for contracts on chains"
        }
      },
      "createAdSpace(string,string,string,uint8,string)": {
        "details": "id and owner will be set automatically",
        "params": {
          "_asking_price": "price of new creating Adspace",
          "_name": "name of new creating Adspace",
          "_numNFTs": "amount of NFTs to mint to msg.sender of creation",
          "_size": "size of the AdSpaces: wide | small | scyscraper",
          "_website": "website where the AdSpace will be located"
        }
      },
      "createCampaign(string,string,string,string)": {
        "details": "owner will be auto assigned to msg.sender",
        "params": {
          "cid": "id of the affected AdSpace",
          "link": "ending timestamp (UNIX)",
          "size": "negotiated price for the deal"
        }
      },
      "createDeal(uint256,uint256,uint40,uint256)": {
        "params": {
          "_adspaceId": "id of the affected AdSpace",
          "_campaignId": "id of the affected campaign",
          "_end_at": "ending timestamp (UNIX)",
          "_price": "negotiated price for the deal"
        }
      },
      "getAdSpaceAddress(uint256)": {
        "params": {
          "i": "the identifier (number) of the Adspace interested in"
        },
        "returns": {
          "_0": "address the addess of the AdSpace Contract with identifier i"
        }
      },
      "getAdSpaceTable()": {
        "returns": {
          "_0": "uint256 the full name of the current AdSpace Table of this AdSpaceFactory"
        }
      },
      "getAdSpaceTableId()": {
        "returns": {
          "_0": "uint256 the id of the current AdSpace Table of this AdSpaceFactory"
        }
      },
      "getCampaignTable()": {
        "returns": {
          "_0": "uint256 the full name of the current Campaign Table of this AdSpaceFactory"
        }
      },
      "getCampaignTableId()": {
        "returns": {
          "_0": "uint256 the id of the current Campaign Table of this AdSpaceFactory"
        }
      },
      "getCounterAdSpaces()": {
        "returns": {
          "_0": "uint256 the current amount of Adspaces created by this Factory"
        }
      },
      "getDealTable()": {
        "returns": {
          "_0": "uint256 he full name of the current Deal Table of this AdSpaceFactory"
        }
      },
      "getDealTableId()": {
        "returns": {
          "_0": "uint256 the id of the current Deal Table of this AdSpaceFactory"
        }
      },
      "onERC721Received(address,address,uint256,bytes)": {
        "details": "See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "createAdSpace(string,string,string,uint8,string)": {
        "notice": "create new AdSpace contract"
      },
      "createCampaign(string,string,string,string)": {
        "notice": "Creating a Campaign and inserting row on Tableland"
      },
      "createDeal(uint256,uint256,uint40,uint256)": {
        "notice": "Creating Deal and inserting row on Tablelandafter creating the deal, the Adspace Table will update on the affected row"
      }
    },
    "notice": "This contract is the controller of all Tableland interactionsand deployer of all the AdSpace contracts",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/AdSpaceFactory.sol:AdSpaceFactory",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2635,
        "contract": "contracts/AdSpaceFactory.sol:AdSpaceFactory",
        "label": "_tableland",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(ITablelandTables)3332"
      },
      {
        "astId": 2637,
        "contract": "contracts/AdSpaceFactory.sol:AdSpaceFactory",
        "label": "_adspacetableid",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 2639,
        "contract": "contracts/AdSpaceFactory.sol:AdSpaceFactory",
        "label": "_adSpaceTable",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 2641,
        "contract": "contracts/AdSpaceFactory.sol:AdSpaceFactory",
        "label": "_campaigntableid",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 2643,
        "contract": "contracts/AdSpaceFactory.sol:AdSpaceFactory",
        "label": "_campaignTable",
        "offset": 0,
        "slot": "5",
        "type": "t_string_storage"
      },
      {
        "astId": 2645,
        "contract": "contracts/AdSpaceFactory.sol:AdSpaceFactory",
        "label": "_dealtableid",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 2647,
        "contract": "contracts/AdSpaceFactory.sol:AdSpaceFactory",
        "label": "_dealTable",
        "offset": 0,
        "slot": "7",
        "type": "t_string_storage"
      },
      {
        "astId": 2650,
        "contract": "contracts/AdSpaceFactory.sol:AdSpaceFactory",
        "label": "_counter_adspaces",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 2653,
        "contract": "contracts/AdSpaceFactory.sol:AdSpaceFactory",
        "label": "_counter_campaigns",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 2656,
        "contract": "contracts/AdSpaceFactory.sol:AdSpaceFactory",
        "label": "_counter_deals",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 2659,
        "contract": "contracts/AdSpaceFactory.sol:AdSpaceFactory",
        "label": "Adspaces",
        "offset": 0,
        "slot": "11",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(ITablelandTables)3332": {
        "encoding": "inplace",
        "label": "contract ITablelandTables",
        "numberOfBytes": "20"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}